// Code generated by MockGen. DO NOT EDIT.
// Source: ./sdk/sdk_interface.go

// Package sdk is a generated GoMock package.
package sdk

import (
	reflect "reflect"

	serialize "chainmaker.org/chainmaker/common/v2/serialize"
	protogo "chainmaker.org/chainmaker/contract-sdk-go/v2/pb/protogo"
	vm "chainmaker.org/chainmaker/pb-go/v2/vm"
	gomock "github.com/golang/mock/gomock"
)

// MockContract is a mock of Contract interface.
type MockContract struct {
	ctrl     *gomock.Controller
	recorder *MockContractMockRecorder
}

// MockContractMockRecorder is the mock recorder for MockContract.
type MockContractMockRecorder struct {
	mock *MockContract
}

// NewMockContract creates a new mock instance.
func NewMockContract(ctrl *gomock.Controller) *MockContract {
	mock := &MockContract{ctrl: ctrl}
	mock.recorder = &MockContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContract) EXPECT() *MockContractMockRecorder {
	return m.recorder
}

// InitContract mocks base method.
func (m *MockContract) InitContract() protogo.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitContract")
	ret0, _ := ret[0].(protogo.Response)
	return ret0
}

// InitContract indicates an expected call of InitContract.
func (mr *MockContractMockRecorder) InitContract() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitContract", reflect.TypeOf((*MockContract)(nil).InitContract))
}

// InvokeContract mocks base method.
func (m *MockContract) InvokeContract(method string) protogo.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeContract", method)
	ret0, _ := ret[0].(protogo.Response)
	return ret0
}

// InvokeContract indicates an expected call of InvokeContract.
func (mr *MockContractMockRecorder) InvokeContract(method interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeContract", reflect.TypeOf((*MockContract)(nil).InvokeContract), method)
}

// UpgradeContract mocks base method.
func (m *MockContract) UpgradeContract() protogo.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeContract")
	ret0, _ := ret[0].(protogo.Response)
	return ret0
}

// UpgradeContract indicates an expected call of UpgradeContract.
func (mr *MockContractMockRecorder) UpgradeContract() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeContract", reflect.TypeOf((*MockContract)(nil).UpgradeContract))
}

// MockSDKInterface is a mock of SDKInterface interface.
type MockSDKInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSDKInterfaceMockRecorder
}

// MockSDKInterfaceMockRecorder is the mock recorder for MockSDKInterface.
type MockSDKInterfaceMockRecorder struct {
	mock *MockSDKInterface
}

// NewMockSDKInterface creates a new mock instance.
func NewMockSDKInterface(ctrl *gomock.Controller) *MockSDKInterface {
	mock := &MockSDKInterface{ctrl: ctrl}
	mock.recorder = &MockSDKInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSDKInterface) EXPECT() *MockSDKInterfaceMockRecorder {
	return m.recorder
}

// CallContract mocks base method.
func (m *MockSDKInterface) CallContract(contractName, method string, args map[string][]byte) protogo.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallContract", contractName, method, args)
	ret0, _ := ret[0].(protogo.Response)
	return ret0
}

// CallContract indicates an expected call of CallContract.
func (mr *MockSDKInterfaceMockRecorder) CallContract(contractName, method, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContract", reflect.TypeOf((*MockSDKInterface)(nil).CallContract), contractName, method, args)
}

// Debugf mocks base method.
func (m *MockSDKInterface) Debugf(format string, a ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockSDKInterfaceMockRecorder) Debugf(format interface{}, a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockSDKInterface)(nil).Debugf), varargs...)
}

// DelState mocks base method.
func (m *MockSDKInterface) DelState(key, field string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelState", key, field)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelState indicates an expected call of DelState.
func (mr *MockSDKInterfaceMockRecorder) DelState(key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelState", reflect.TypeOf((*MockSDKInterface)(nil).DelState), key, field)
}

// DelStateFromKey mocks base method.
func (m *MockSDKInterface) DelStateFromKey(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelStateFromKey", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelStateFromKey indicates an expected call of DelStateFromKey.
func (mr *MockSDKInterfaceMockRecorder) DelStateFromKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelStateFromKey", reflect.TypeOf((*MockSDKInterface)(nil).DelStateFromKey), key)
}

// EmitEvent mocks base method.
func (m *MockSDKInterface) EmitEvent(topic string, data []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEvent", topic, data)
}

// EmitEvent indicates an expected call of EmitEvent.
func (mr *MockSDKInterfaceMockRecorder) EmitEvent(topic, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEvent", reflect.TypeOf((*MockSDKInterface)(nil).EmitEvent), topic, data)
}

// Errorf mocks base method.
func (m *MockSDKInterface) Errorf(format string, a ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockSDKInterfaceMockRecorder) Errorf(format interface{}, a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockSDKInterface)(nil).Errorf), varargs...)
}

// GetArgs mocks base method.
func (m *MockSDKInterface) GetArgs() map[string][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArgs")
	ret0, _ := ret[0].(map[string][]byte)
	return ret0
}

// GetArgs indicates an expected call of GetArgs.
func (mr *MockSDKInterfaceMockRecorder) GetArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArgs", reflect.TypeOf((*MockSDKInterface)(nil).GetArgs))
}

// GetBatchState mocks base method.
func (m *MockSDKInterface) GetBatchState(batchKeys []*vm.BatchKey) ([]*vm.BatchKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchState", batchKeys)
	ret0, _ := ret[0].([]*vm.BatchKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchState indicates an expected call of GetBatchState.
func (mr *MockSDKInterfaceMockRecorder) GetBatchState(batchKeys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchState", reflect.TypeOf((*MockSDKInterface)(nil).GetBatchState), batchKeys)
}

// GetBlockHeight mocks base method.
func (m *MockSDKInterface) GetBlockHeight() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHeight")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHeight indicates an expected call of GetBlockHeight.
func (mr *MockSDKInterfaceMockRecorder) GetBlockHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeight", reflect.TypeOf((*MockSDKInterface)(nil).GetBlockHeight))
}

// GetContractAddr mocks base method.
func (m *MockSDKInterface) GetContractAddr() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractAddr")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractAddr indicates an expected call of GetContractAddr.
func (mr *MockSDKInterfaceMockRecorder) GetContractAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractAddr", reflect.TypeOf((*MockSDKInterface)(nil).GetContractAddr))
}

// GetContractName mocks base method.
func (m *MockSDKInterface) GetContractName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractName indicates an expected call of GetContractName.
func (mr *MockSDKInterfaceMockRecorder) GetContractName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractName", reflect.TypeOf((*MockSDKInterface)(nil).GetContractName))
}

// GetCreatorOrgId mocks base method.
func (m *MockSDKInterface) GetCreatorOrgId() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatorOrgId")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreatorOrgId indicates an expected call of GetCreatorOrgId.
func (mr *MockSDKInterfaceMockRecorder) GetCreatorOrgId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatorOrgId", reflect.TypeOf((*MockSDKInterface)(nil).GetCreatorOrgId))
}

// GetCreatorPk mocks base method.
func (m *MockSDKInterface) GetCreatorPk() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatorPk")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreatorPk indicates an expected call of GetCreatorPk.
func (mr *MockSDKInterfaceMockRecorder) GetCreatorPk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatorPk", reflect.TypeOf((*MockSDKInterface)(nil).GetCreatorPk))
}

// GetCreatorRole mocks base method.
func (m *MockSDKInterface) GetCreatorRole() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatorRole")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreatorRole indicates an expected call of GetCreatorRole.
func (mr *MockSDKInterfaceMockRecorder) GetCreatorRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatorRole", reflect.TypeOf((*MockSDKInterface)(nil).GetCreatorRole))
}

// GetSenderAddr mocks base method.
func (m *MockSDKInterface) GetSenderAddr() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSenderAddr")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSenderAddr indicates an expected call of GetSenderAddr.
func (mr *MockSDKInterfaceMockRecorder) GetSenderAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSenderAddr", reflect.TypeOf((*MockSDKInterface)(nil).GetSenderAddr))
}

// GetSenderOrgId mocks base method.
func (m *MockSDKInterface) GetSenderOrgId() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSenderOrgId")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSenderOrgId indicates an expected call of GetSenderOrgId.
func (mr *MockSDKInterfaceMockRecorder) GetSenderOrgId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSenderOrgId", reflect.TypeOf((*MockSDKInterface)(nil).GetSenderOrgId))
}

// GetSenderPk mocks base method.
func (m *MockSDKInterface) GetSenderPk() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSenderPk")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSenderPk indicates an expected call of GetSenderPk.
func (mr *MockSDKInterfaceMockRecorder) GetSenderPk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSenderPk", reflect.TypeOf((*MockSDKInterface)(nil).GetSenderPk))
}

// GetSenderRole mocks base method.
func (m *MockSDKInterface) GetSenderRole() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSenderRole")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSenderRole indicates an expected call of GetSenderRole.
func (mr *MockSDKInterfaceMockRecorder) GetSenderRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSenderRole", reflect.TypeOf((*MockSDKInterface)(nil).GetSenderRole))
}

// GetState mocks base method.
func (m *MockSDKInterface) GetState(key, field string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", key, field)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockSDKInterfaceMockRecorder) GetState(key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockSDKInterface)(nil).GetState), key, field)
}

// GetStateByte mocks base method.
func (m *MockSDKInterface) GetStateByte(key, field string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateByte", key, field)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateByte indicates an expected call of GetStateByte.
func (mr *MockSDKInterfaceMockRecorder) GetStateByte(key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateByte", reflect.TypeOf((*MockSDKInterface)(nil).GetStateByte), key, field)
}

// GetStateFromKey mocks base method.
func (m *MockSDKInterface) GetStateFromKey(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateFromKey", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateFromKey indicates an expected call of GetStateFromKey.
func (mr *MockSDKInterfaceMockRecorder) GetStateFromKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateFromKey", reflect.TypeOf((*MockSDKInterface)(nil).GetStateFromKey), key)
}

// GetStateFromKeyByte mocks base method.
func (m *MockSDKInterface) GetStateFromKeyByte(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateFromKeyByte", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateFromKeyByte indicates an expected call of GetStateFromKeyByte.
func (mr *MockSDKInterfaceMockRecorder) GetStateFromKeyByte(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateFromKeyByte", reflect.TypeOf((*MockSDKInterface)(nil).GetStateFromKeyByte), key)
}

// GetStateFromKeyWithExists mocks base method.
func (m *MockSDKInterface) GetStateFromKeyWithExists(key string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateFromKeyWithExists", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStateFromKeyWithExists indicates an expected call of GetStateFromKeyWithExists.
func (mr *MockSDKInterfaceMockRecorder) GetStateFromKeyWithExists(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateFromKeyWithExists", reflect.TypeOf((*MockSDKInterface)(nil).GetStateFromKeyWithExists), key)
}

// GetStateWithExists mocks base method.
func (m *MockSDKInterface) GetStateWithExists(key, field string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateWithExists", key, field)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStateWithExists indicates an expected call of GetStateWithExists.
func (mr *MockSDKInterfaceMockRecorder) GetStateWithExists(key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateWithExists", reflect.TypeOf((*MockSDKInterface)(nil).GetStateWithExists), key, field)
}

// GetTxId mocks base method.
func (m *MockSDKInterface) GetTxId() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxId")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxId indicates an expected call of GetTxId.
func (mr *MockSDKInterfaceMockRecorder) GetTxId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxId", reflect.TypeOf((*MockSDKInterface)(nil).GetTxId))
}

// GetTxInfo mocks base method.
func (m *MockSDKInterface) GetTxInfo(txId string) protogo.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxInfo", txId)
	ret0, _ := ret[0].(protogo.Response)
	return ret0
}

// GetTxInfo indicates an expected call of GetTxInfo.
func (mr *MockSDKInterfaceMockRecorder) GetTxInfo(txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxInfo", reflect.TypeOf((*MockSDKInterface)(nil).GetTxInfo), txId)
}

// GetTxTimeStamp mocks base method.
func (m *MockSDKInterface) GetTxTimeStamp() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxTimeStamp")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxTimeStamp indicates an expected call of GetTxTimeStamp.
func (mr *MockSDKInterfaceMockRecorder) GetTxTimeStamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxTimeStamp", reflect.TypeOf((*MockSDKInterface)(nil).GetTxTimeStamp))
}

// Infof mocks base method.
func (m *MockSDKInterface) Infof(format string, a ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockSDKInterfaceMockRecorder) Infof(format interface{}, a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockSDKInterface)(nil).Infof), varargs...)
}

// Log mocks base method.
func (m *MockSDKInterface) Log(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Log", message)
}

// Log indicates an expected call of Log.
func (mr *MockSDKInterfaceMockRecorder) Log(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockSDKInterface)(nil).Log), message)
}

// NewHistoryKvIterForKey mocks base method.
func (m *MockSDKInterface) NewHistoryKvIterForKey(key, field string) (KeyHistoryKvIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewHistoryKvIterForKey", key, field)
	ret0, _ := ret[0].(KeyHistoryKvIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewHistoryKvIterForKey indicates an expected call of NewHistoryKvIterForKey.
func (mr *MockSDKInterfaceMockRecorder) NewHistoryKvIterForKey(key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewHistoryKvIterForKey", reflect.TypeOf((*MockSDKInterface)(nil).NewHistoryKvIterForKey), key, field)
}

// NewIterator mocks base method.
func (m *MockSDKInterface) NewIterator(startKey, limitKey string) (ResultSetKV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIterator", startKey, limitKey)
	ret0, _ := ret[0].(ResultSetKV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewIterator indicates an expected call of NewIterator.
func (mr *MockSDKInterfaceMockRecorder) NewIterator(startKey, limitKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIterator", reflect.TypeOf((*MockSDKInterface)(nil).NewIterator), startKey, limitKey)
}

// NewIteratorPrefixWithKey mocks base method.
func (m *MockSDKInterface) NewIteratorPrefixWithKey(key string) (ResultSetKV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIteratorPrefixWithKey", key)
	ret0, _ := ret[0].(ResultSetKV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewIteratorPrefixWithKey indicates an expected call of NewIteratorPrefixWithKey.
func (mr *MockSDKInterfaceMockRecorder) NewIteratorPrefixWithKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIteratorPrefixWithKey", reflect.TypeOf((*MockSDKInterface)(nil).NewIteratorPrefixWithKey), key)
}

// NewIteratorPrefixWithKeyField mocks base method.
func (m *MockSDKInterface) NewIteratorPrefixWithKeyField(key, field string) (ResultSetKV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIteratorPrefixWithKeyField", key, field)
	ret0, _ := ret[0].(ResultSetKV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewIteratorPrefixWithKeyField indicates an expected call of NewIteratorPrefixWithKeyField.
func (mr *MockSDKInterfaceMockRecorder) NewIteratorPrefixWithKeyField(key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIteratorPrefixWithKeyField", reflect.TypeOf((*MockSDKInterface)(nil).NewIteratorPrefixWithKeyField), key, field)
}

// NewIteratorWithField mocks base method.
func (m *MockSDKInterface) NewIteratorWithField(key, startField, limitField string) (ResultSetKV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIteratorWithField", key, startField, limitField)
	ret0, _ := ret[0].(ResultSetKV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewIteratorWithField indicates an expected call of NewIteratorWithField.
func (mr *MockSDKInterfaceMockRecorder) NewIteratorWithField(key, startField, limitField interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIteratorWithField", reflect.TypeOf((*MockSDKInterface)(nil).NewIteratorWithField), key, startField, limitField)
}

// Origin mocks base method.
func (m *MockSDKInterface) Origin() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Origin")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Origin indicates an expected call of Origin.
func (mr *MockSDKInterfaceMockRecorder) Origin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Origin", reflect.TypeOf((*MockSDKInterface)(nil).Origin))
}

// PutState mocks base method.
func (m *MockSDKInterface) PutState(key, field, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutState", key, field, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutState indicates an expected call of PutState.
func (mr *MockSDKInterfaceMockRecorder) PutState(key, field, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutState", reflect.TypeOf((*MockSDKInterface)(nil).PutState), key, field, value)
}

// PutStateByte mocks base method.
func (m *MockSDKInterface) PutStateByte(key, field string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutStateByte", key, field, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutStateByte indicates an expected call of PutStateByte.
func (mr *MockSDKInterfaceMockRecorder) PutStateByte(key, field, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutStateByte", reflect.TypeOf((*MockSDKInterface)(nil).PutStateByte), key, field, value)
}

// PutStateFromKey mocks base method.
func (m *MockSDKInterface) PutStateFromKey(key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutStateFromKey", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutStateFromKey indicates an expected call of PutStateFromKey.
func (mr *MockSDKInterfaceMockRecorder) PutStateFromKey(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutStateFromKey", reflect.TypeOf((*MockSDKInterface)(nil).PutStateFromKey), key, value)
}

// PutStateFromKeyByte mocks base method.
func (m *MockSDKInterface) PutStateFromKeyByte(key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutStateFromKeyByte", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutStateFromKeyByte indicates an expected call of PutStateFromKeyByte.
func (mr *MockSDKInterfaceMockRecorder) PutStateFromKeyByte(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutStateFromKeyByte", reflect.TypeOf((*MockSDKInterface)(nil).PutStateFromKeyByte), key, value)
}

// Sender mocks base method.
func (m *MockSDKInterface) Sender() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sender")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sender indicates an expected call of Sender.
func (mr *MockSDKInterfaceMockRecorder) Sender() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sender", reflect.TypeOf((*MockSDKInterface)(nil).Sender))
}

// Warnf mocks base method.
func (m *MockSDKInterface) Warnf(format string, a ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockSDKInterfaceMockRecorder) Warnf(format interface{}, a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockSDKInterface)(nil).Warnf), varargs...)
}

// MockResultSet is a mock of ResultSet interface.
type MockResultSet struct {
	ctrl     *gomock.Controller
	recorder *MockResultSetMockRecorder
}

// MockResultSetMockRecorder is the mock recorder for MockResultSet.
type MockResultSetMockRecorder struct {
	mock *MockResultSet
}

// NewMockResultSet creates a new mock instance.
func NewMockResultSet(ctrl *gomock.Controller) *MockResultSet {
	mock := &MockResultSet{ctrl: ctrl}
	mock.recorder = &MockResultSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultSet) EXPECT() *MockResultSetMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockResultSet) Close() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Close indicates an expected call of Close.
func (mr *MockResultSetMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockResultSet)(nil).Close))
}

// HasNext mocks base method.
func (m *MockResultSet) HasNext() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasNext")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasNext indicates an expected call of HasNext.
func (mr *MockResultSetMockRecorder) HasNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNext", reflect.TypeOf((*MockResultSet)(nil).HasNext))
}

// NextRow mocks base method.
func (m *MockResultSet) NextRow() (*serialize.EasyCodec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextRow")
	ret0, _ := ret[0].(*serialize.EasyCodec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextRow indicates an expected call of NextRow.
func (mr *MockResultSetMockRecorder) NextRow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextRow", reflect.TypeOf((*MockResultSet)(nil).NextRow))
}

// MockResultSetKV is a mock of ResultSetKV interface.
type MockResultSetKV struct {
	ctrl     *gomock.Controller
	recorder *MockResultSetKVMockRecorder
}

// MockResultSetKVMockRecorder is the mock recorder for MockResultSetKV.
type MockResultSetKVMockRecorder struct {
	mock *MockResultSetKV
}

// NewMockResultSetKV creates a new mock instance.
func NewMockResultSetKV(ctrl *gomock.Controller) *MockResultSetKV {
	mock := &MockResultSetKV{ctrl: ctrl}
	mock.recorder = &MockResultSetKVMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultSetKV) EXPECT() *MockResultSetKVMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockResultSetKV) Close() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Close indicates an expected call of Close.
func (mr *MockResultSetKVMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockResultSetKV)(nil).Close))
}

// HasNext mocks base method.
func (m *MockResultSetKV) HasNext() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasNext")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasNext indicates an expected call of HasNext.
func (mr *MockResultSetKVMockRecorder) HasNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNext", reflect.TypeOf((*MockResultSetKV)(nil).HasNext))
}

// Next mocks base method.
func (m *MockResultSetKV) Next() (string, string, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].([]byte)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Next indicates an expected call of Next.
func (mr *MockResultSetKVMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockResultSetKV)(nil).Next))
}

// NextRow mocks base method.
func (m *MockResultSetKV) NextRow() (*serialize.EasyCodec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextRow")
	ret0, _ := ret[0].(*serialize.EasyCodec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextRow indicates an expected call of NextRow.
func (mr *MockResultSetKVMockRecorder) NextRow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextRow", reflect.TypeOf((*MockResultSetKV)(nil).NextRow))
}

// MockKeyHistoryKvIter is a mock of KeyHistoryKvIter interface.
type MockKeyHistoryKvIter struct {
	ctrl     *gomock.Controller
	recorder *MockKeyHistoryKvIterMockRecorder
}

// MockKeyHistoryKvIterMockRecorder is the mock recorder for MockKeyHistoryKvIter.
type MockKeyHistoryKvIterMockRecorder struct {
	mock *MockKeyHistoryKvIter
}

// NewMockKeyHistoryKvIter creates a new mock instance.
func NewMockKeyHistoryKvIter(ctrl *gomock.Controller) *MockKeyHistoryKvIter {
	mock := &MockKeyHistoryKvIter{ctrl: ctrl}
	mock.recorder = &MockKeyHistoryKvIterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyHistoryKvIter) EXPECT() *MockKeyHistoryKvIterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKeyHistoryKvIter) Close() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Close indicates an expected call of Close.
func (mr *MockKeyHistoryKvIterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKeyHistoryKvIter)(nil).Close))
}

// HasNext mocks base method.
func (m *MockKeyHistoryKvIter) HasNext() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasNext")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasNext indicates an expected call of HasNext.
func (mr *MockKeyHistoryKvIterMockRecorder) HasNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNext", reflect.TypeOf((*MockKeyHistoryKvIter)(nil).HasNext))
}

// Next mocks base method.
func (m *MockKeyHistoryKvIter) Next() (*KeyModification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*KeyModification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockKeyHistoryKvIterMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockKeyHistoryKvIter)(nil).Next))
}

// NextRow mocks base method.
func (m *MockKeyHistoryKvIter) NextRow() (*serialize.EasyCodec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextRow")
	ret0, _ := ret[0].(*serialize.EasyCodec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextRow indicates an expected call of NextRow.
func (mr *MockKeyHistoryKvIterMockRecorder) NextRow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextRow", reflect.TypeOf((*MockKeyHistoryKvIter)(nil).NextRow))
}
