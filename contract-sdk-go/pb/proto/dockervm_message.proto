syntax = "proto3";

package proto;

option go_package = "chainmaker.org/chainmaker/contract-sdk-go/pb/protogo";

service DockerVMRpc {
    rpc DockerVMCommunicate(stream DockerVMMessage) returns(stream DockerVMMessage) {};
}

//DockerVMMessage means message between chainmaker and docker vm
message DockerVMMessage {

    string tx_id = 1;

    DockerVMType type = 2;

    CrossContext cross_context = 3;

    // if not used, set to nil
    SysCallMessage sys_call_message = 4;

    // if not used, set to nil
    TxRequest request = 5;

    // if not used, set to nil
    TxResponse response = 6;

    string chain_id = 7;

    repeated StepDuration step_durations = 8;

}

message SysCallMessage {

    DockerVMCode code = 1;

    string message = 2;

    // if not used, set to nil
    map<string, bytes> payload = 3;
}

message CrossContext {

    uint32 current_depth = 1;

    string process_name = 2;

    /*
     63          59           43                   0
      +----------+^-----------+-^---------+-^-------
      |   4bits   |   16bits    |   .....   | 4bits|
      +----------+^-----------+-^---------+-^-------
     depth_count | history_flag | vec<runtime_type>
     the length of vec is controlled by depth_count
    */
    uint64 cross_info = 3;
}

message StepDuration {

    StepType type = 1;

    int64 start_time = 2;

    int64 step_duration = 3;

    int64 until_duration = 4;

    string msg = 5;
}

enum DockerVMType {

    UNDEFINED = 0;

    REGISTER = 1;

    REGISTERED = 2;

    PREPARE = 3;

    READY = 4;

    INIT = 5;

    INVOKE = 6;

    TX_REQUEST = 7;

    TX_RESPONSE = 8;

    GET_STATE_REQUEST = 9;

    GET_STATE_RESPONSE = 10;

    GET_BYTECODE_REQUEST = 11;

    GET_BYTECODE_RESPONSE = 12;

    CALL_CONTRACT_REQUEST = 13;

    CALL_CONTRACT_RESPONSE = 14;

    COMPLETED = 15;

    ERROR = 16;

    CREATE_KV_ITERATOR_REQUEST = 17;

    CREATE_KV_ITERATOR_RESPONSE = 18;

    CONSUME_KV_ITERATOR_REQUEST = 19;

    CONSUME_KV_ITERATOR_RESPONSE = 20;

    CREATE_KEY_HISTORY_ITER_REQUEST = 21;

    CREATE_KEY_HISTORY_TER_RESPONSE = 22;

    CONSUME_KEY_HISTORY_ITER_REQUEST = 23;

    CONSUME_KEY_HISTORY_ITER_RESPONSE = 24;

    GET_SENDER_ADDRESS_REQUEST = 25;

    GET_SENDER_ADDRESS_RESPONSE = 26;

    GET_BATCH_STATE_REQUEST = 27;

    GET_BATCH_STATE_RESPONSE = 28;

}

enum StepType {

    RUNTIME_PREPARE_TX_REQUEST = 0;

    RUNTIME_GRPC_SEND_TX_REQUEST = 1;

    ENGINE_GRPC_RECEIVE_TX_REQUEST = 2;

    ENGINE_SCHEDULER_RECEIVE_TX_REQUEST = 3;

    ENGINE_SCHEDULER_SEND_TX_REQUEST = 4;

    ENGINE_GROUP_RECEIVE_TX_REQUEST = 5;

    ENGINE_GROUP_SEND_TX_REQUEST = 6;

    ENGINE_PROCESS_RECEIVE_TX_REQUEST = 7;

    ENGINE_PROCESS_SEND_TX_REQUEST = 8;

    ENGINE_PROCESS_RECEIVE_TX_RESPONSE = 9;

    SANDBOX_GRPC_RECEIVE_TX_REQUEST = 10;

    SANDBOX_GRPC_SEND_TX_REQUEST = 11;

    SANDBOX_CHAN_SEND_TX_REQUEST = 12;

    SANDBOX_HANDLER_RECEIVE_TX_REQUEST = 13;

    SANDBOX_HANDLER_EXECUTE = 14;

    SANDBOX_SEND_CHAIN_RESP = 15;

    SANDBOX_GRPC_SEND_CHAIN_RESP = 16;

    SANDBOX_SEND_ENGINE_RESP = 17;

    RUNTIME_GRPC_RECEIVE_TX_RESPONSE = 18;

    RUNTIME_GET_NOTIFY_TX_RESPONSE = 19;

    RUNTIME_HANDLER_RECEIVE_TX_RESPONSE = 20;

    RUNTIME_HANDLE_TX_RESPONSE = 21;
}

// TX_REQUEST
message TxRequest {

    string contract_name = 1;

    string contract_version = 2;

    string method = 3;

    map<string, bytes> parameters = 4;

    // cross contract in use
    TxContext tx_context = 5;

    string chain_id = 6;
}

message TxContext {
    map<string, bytes> write_map = 1;

    map<string, bytes> read_map = 2;
}

// TX_RESPONSE
message TxResponse {

    string tx_id = 1;

    DockerVMCode code = 2;

    bytes result = 3;

    string message = 4;

    map<string, bytes> write_map = 5;

    map<string, bytes> read_map = 6;

    repeated DockerContractEvent events = 7;

    string contract_name = 8;

    string contract_version = 9;

    string chain_id = 10;
}

message DockerContractEvent {
    // Event topic
    string topic = 1;
    // Event contract name
    string contract_name = 2;
    // Event payload
    repeated string data = 3;
}


enum DockerVMCode {
    OK = 0;
    FAIL = 1;
}

// ============== DMS pb ==============
// --------------------  request message ---------------------
message CallContractRequest {
    string contract_name = 1;
    string contract_method = 2;
    // args
    map<string, bytes> args = 3;
}

// --------------------  result message ---------------------

// user method response
message Response {
    // A status code that should follow the HTTP status codes.
    int32 status = 1;

    // A message associated with the response code. error has message
    string message = 2;

    // A payload that can be used to include metadata with this response. success with payload
    bytes payload = 3;
}

// real user contract response
message ContractResponse {

    // always has response
    Response response = 1;

    // always has write map
    map<string, bytes> write_map = 2;

    // only cross contracts has read map
    map<string, bytes> read_map = 3;

    // always has events
    repeated Event events = 4;
}

message Event {
    // Event topic
    string topic = 1;
    // Event contract name
    string contract_name = 2;
    // Event payload
    repeated string data = 3;
}
