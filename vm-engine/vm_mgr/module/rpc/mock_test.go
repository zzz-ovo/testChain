// Code generated by MockGen. DO NOT EDIT.
// Source: vm_mgr/pb/protogo/dockervm_message.pb.go

// Package rpc is a generated GoMock package.
package rpc

import (
	context "context"
	reflect "reflect"

	protogo "chainmaker.org/chainmaker/vm-engine/v2/vm_mgr/pb/protogo"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockDockerVMRpcClient is a mock of DockerVMRpcClient interfaces.
type MockDockerVMRpcClient struct {
	ctrl     *gomock.Controller
	recorder *MockDockerVMRpcClientMockRecorder
}

// MockDockerVMRpcClientMockRecorder is the mock recorder for MockDockerVMRpcClient.
type MockDockerVMRpcClientMockRecorder struct {
	mock *MockDockerVMRpcClient
}

// NewMockDockerVMRpcClient creates a new mock instance.
func NewMockDockerVMRpcClient(ctrl *gomock.Controller) *MockDockerVMRpcClient {
	mock := &MockDockerVMRpcClient{ctrl: ctrl}
	mock.recorder = &MockDockerVMRpcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerVMRpcClient) EXPECT() *MockDockerVMRpcClientMockRecorder {
	return m.recorder
}

// DockerVMCommunicate mocks base method.
func (m *MockDockerVMRpcClient) DockerVMCommunicate(ctx context.Context, opts ...grpc.CallOption) (protogo.DockerVMRpc_DockerVMCommunicateClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DockerVMCommunicate", varargs...)
	ret0, _ := ret[0].(protogo.DockerVMRpc_DockerVMCommunicateClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DockerVMCommunicate indicates an expected call of DockerVMCommunicate.
func (mr *MockDockerVMRpcClientMockRecorder) DockerVMCommunicate(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerVMCommunicate", reflect.TypeOf((*MockDockerVMRpcClient)(nil).DockerVMCommunicate), varargs...)
}

// MockDockerVMRpc_DockerVMCommunicateClient is a mock of DockerVMRpc_DockerVMCommunicateClient interfaces.
type MockDockerVMRpc_DockerVMCommunicateClient struct {
	ctrl     *gomock.Controller
	recorder *MockDockerVMRpc_DockerVMCommunicateClientMockRecorder
}

// MockDockerVMRpc_DockerVMCommunicateClientMockRecorder is the mock recorder for MockDockerVMRpc_DockerVMCommunicateClient.
type MockDockerVMRpc_DockerVMCommunicateClientMockRecorder struct {
	mock *MockDockerVMRpc_DockerVMCommunicateClient
}

// NewMockDockerVMRpc_DockerVMCommunicateClient creates a new mock instance.
func NewMockDockerVMRpc_DockerVMCommunicateClient(ctrl *gomock.Controller) *MockDockerVMRpc_DockerVMCommunicateClient {
	mock := &MockDockerVMRpc_DockerVMCommunicateClient{ctrl: ctrl}
	mock.recorder = &MockDockerVMRpc_DockerVMCommunicateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerVMRpc_DockerVMCommunicateClient) EXPECT() *MockDockerVMRpc_DockerVMCommunicateClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockDockerVMRpc_DockerVMCommunicateClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDockerVMRpc_DockerVMCommunicateClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDockerVMRpc_DockerVMCommunicateClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDockerVMRpc_DockerVMCommunicateClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDockerVMRpc_DockerVMCommunicateClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDockerVMRpc_DockerVMCommunicateClient)(nil).Context))
}

// Header mocks base method.
func (m *MockDockerVMRpc_DockerVMCommunicateClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDockerVMRpc_DockerVMCommunicateClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDockerVMRpc_DockerVMCommunicateClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockDockerVMRpc_DockerVMCommunicateClient) Recv() (*protogo.DockerVMMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*protogo.DockerVMMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDockerVMRpc_DockerVMCommunicateClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDockerVMRpc_DockerVMCommunicateClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockDockerVMRpc_DockerVMCommunicateClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDockerVMRpc_DockerVMCommunicateClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDockerVMRpc_DockerVMCommunicateClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockDockerVMRpc_DockerVMCommunicateClient) Send(arg0 *protogo.DockerVMMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDockerVMRpc_DockerVMCommunicateClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDockerVMRpc_DockerVMCommunicateClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockDockerVMRpc_DockerVMCommunicateClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDockerVMRpc_DockerVMCommunicateClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDockerVMRpc_DockerVMCommunicateClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockDockerVMRpc_DockerVMCommunicateClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDockerVMRpc_DockerVMCommunicateClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDockerVMRpc_DockerVMCommunicateClient)(nil).Trailer))
}

// MockDockerVMRpcServer is a mock of DockerVMRpcServer interfaces.
type MockDockerVMRpcServer struct {
	ctrl     *gomock.Controller
	recorder *MockDockerVMRpcServerMockRecorder
}

// MockDockerVMRpcServerMockRecorder is the mock recorder for MockDockerVMRpcServer.
type MockDockerVMRpcServerMockRecorder struct {
	mock *MockDockerVMRpcServer
}

// NewMockDockerVMRpcServer creates a new mock instance.
func NewMockDockerVMRpcServer(ctrl *gomock.Controller) *MockDockerVMRpcServer {
	mock := &MockDockerVMRpcServer{ctrl: ctrl}
	mock.recorder = &MockDockerVMRpcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerVMRpcServer) EXPECT() *MockDockerVMRpcServerMockRecorder {
	return m.recorder
}

// DockerVMCommunicate mocks base method.
func (m *MockDockerVMRpcServer) DockerVMCommunicate(arg0 protogo.DockerVMRpc_DockerVMCommunicateServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DockerVMCommunicate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DockerVMCommunicate indicates an expected call of DockerVMCommunicate.
func (mr *MockDockerVMRpcServerMockRecorder) DockerVMCommunicate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerVMCommunicate", reflect.TypeOf((*MockDockerVMRpcServer)(nil).DockerVMCommunicate), arg0)
}

// MockDockerVMRpc_DockerVMCommunicateServer is a mock of DockerVMRpc_DockerVMCommunicateServer interfaces.
type MockDockerVMRpc_DockerVMCommunicateServer struct {
	ctrl     *gomock.Controller
	recorder *MockDockerVMRpc_DockerVMCommunicateServerMockRecorder
}

// MockDockerVMRpc_DockerVMCommunicateServerMockRecorder is the mock recorder for MockDockerVMRpc_DockerVMCommunicateServer.
type MockDockerVMRpc_DockerVMCommunicateServerMockRecorder struct {
	mock *MockDockerVMRpc_DockerVMCommunicateServer
}

// NewMockDockerVMRpc_DockerVMCommunicateServer creates a new mock instance.
func NewMockDockerVMRpc_DockerVMCommunicateServer(ctrl *gomock.Controller) *MockDockerVMRpc_DockerVMCommunicateServer {
	mock := &MockDockerVMRpc_DockerVMCommunicateServer{ctrl: ctrl}
	mock.recorder = &MockDockerVMRpc_DockerVMCommunicateServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerVMRpc_DockerVMCommunicateServer) EXPECT() *MockDockerVMRpc_DockerVMCommunicateServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockDockerVMRpc_DockerVMCommunicateServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDockerVMRpc_DockerVMCommunicateServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDockerVMRpc_DockerVMCommunicateServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockDockerVMRpc_DockerVMCommunicateServer) Recv() (*protogo.DockerVMMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*protogo.DockerVMMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDockerVMRpc_DockerVMCommunicateServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDockerVMRpc_DockerVMCommunicateServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockDockerVMRpc_DockerVMCommunicateServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDockerVMRpc_DockerVMCommunicateServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDockerVMRpc_DockerVMCommunicateServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockDockerVMRpc_DockerVMCommunicateServer) Send(arg0 *protogo.DockerVMMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDockerVMRpc_DockerVMCommunicateServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDockerVMRpc_DockerVMCommunicateServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockDockerVMRpc_DockerVMCommunicateServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockDockerVMRpc_DockerVMCommunicateServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockDockerVMRpc_DockerVMCommunicateServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockDockerVMRpc_DockerVMCommunicateServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDockerVMRpc_DockerVMCommunicateServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDockerVMRpc_DockerVMCommunicateServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockDockerVMRpc_DockerVMCommunicateServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockDockerVMRpc_DockerVMCommunicateServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockDockerVMRpc_DockerVMCommunicateServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockDockerVMRpc_DockerVMCommunicateServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockDockerVMRpc_DockerVMCommunicateServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockDockerVMRpc_DockerVMCommunicateServer)(nil).SetTrailer), arg0)
}
